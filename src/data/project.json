[
    {
        "image": "/fraud-detection.png",
        "title": "Credit Card Fraud Detection ML System",
        "link": "https://github.com/andrewnguyen41/fraud-detection-ml-system",
        "summary": "A Machine Learning system for fraud detection using XGBoost, SMOTE achieving F1 score 0.92 on Kaggle dataset. Establish a mechanism to regularly check for new data, adjust the model, and adapt to continuous update patterns.",
        "tags": ["Scikit-learn", "Flask", "AWS S3"]
    },
    {
        "image": "/aws-core-banking.jpg",
        "title": "Core Banking Disaster Recovery Solution",
        "link": "https://github.com/andrewnguyen41/aws-core-banking-disaster-recovery",
        "summary": "A system design for handling disaster backup and recovery of core banking system using AWS services . Ensured minimal downtime and rapid failover, offered system recovery point and time measured in minutes.",
        "tags": ["AWS", "CloudFormation", "System Design"]
    },
    {
        "image": "/location-search.jpg",
        "title": "Real-time Location Search with Spatial Index",
        "link": "https://github.com/andrewnguyen41/real-time-location-search",
        "summary": "A Real-time Location Search illustration for driving booking app with efficient nearby drivers finding using Flask, Socket.IO, and spatial indexing for optimal performance and accuracy.",
        "tags": ["Flask", "SocketIO", "MongoDB", "Spatial Index"]
    },
    {
        "image": "/saga.jpg",
        "title": "Saga Pattern for Distributed Payment Transactions",
        "link": "https://github.com/andrewnguyen41/saga-nodejs-kafka",
        "summary": "A demonstration project for handling payment transactions in distributed system using Saga Orchestration Pattern. Enabled low coupling, fault tolerance, retries, and reliable rollback for long-running transactions.",
        "tags": ["NodeJs", "Kafka", "MongoDB"]
    },
    {
        "image": "/serverless-image-processing.png",
        "title": "Serverless Image Processing",
        "link": "https://github.com/andrewnguyen41/aws-serverless-image-processing",
        "summary": "An on-demand, scalable image processing solution using AWS Lambda, S3, Cloudfront. Handled various image-related tasks, including resizing, cropping, and object recognition.",
        "tags": ["AWS", "Lambda", "S3", "Cloudfront"]
    },
    {
        "image": "/vim-showcase.jpg",
        "title": "Vim Development Config Showcase",
        "link": "https://github.com/andrewnguyen41/vim-showcase",
        "summary": "A Vim, Tmux, Yabai, Alacritty development config showcases.",
        "tags": ["NeoVim", "LunarVim", "Tmux"]
    },
    {
        "image": "/simple-search-engine.jpg",
        "title": "Simple Search Engine",
        "link": "https://github.com/andrewnguyen41/simple-search-engine",
        "summary": "A simple search engine extracting html with Jsoup, text preprocessing via Stemming, edit distance search, and caching for recent results.",
        "tags": ["Java", "JSoup", "Regex", "Lucene", "Edit Distance"]
    },
    {
        "image": "/hate-speech.jpg",
        "title": "Hate Speech Detection",
        "link": "https://github.com/andrewnguyen41/hate-speech-detection",
        "summary": "A hate speech detection using NLTK and comparison of multiple ML methods including LSTM, RNN, TFIDF.",
        "tags": ["Python", "NLTK", "Scikit-learn", "LSTM", "RNN", "TFIDF"]
    },
    {
        "image": "/distributed-joins.jpg",
        "title": "Distributed SQL Joins Benchmark",
        "link": "https://github.com/andrewnguyen41/distributed-sql-joins-benchmark",
        "summary": "Comparative analysis of different relational database join strategies in distributed systems, including Broadcast, Partitioned, Bucketed, Sort-Merge, MapReduce, and Bloom Filter Joins",
        "tags": ["NodeJs", "Mysql", "Distributed Joins", "Docker"]
    }
]